;------------------------------------------------------------------------------
; Global
;------------------------------------------------------------------------------
; Hide start-up message
(setq inhibit-startup-message t)

; Windows title
(setq frame-title-format (quote ("emacs - " (buffer-file-name "%f" ("%b")))))

; Bottom bar
(line-number-mode t)
(column-number-mode t)
(which-func-mode 1)

; Command completion
(icomplete-mode)

; Text mode by default
(setq initial-major-mode 'text-mode)
(setq default-major-mode 'text-mode)

; No automatic new-line
(setq next-line-add-newlines nil)


; Ignore warning on large modifications witch can not be stored for undo
(custom-set-variables
 '(warning-suppress-types (quote ((undo discard-info))))
 )


;------------------------------------------------------------------------------
; Aspell
;------------------------------------------------------------------------------
(add-to-list 'exec-path "C:/local/Aspell/bin/")
(setq ispell-program-name "aspell")
(setq ispell-dictionary "american")


;------------------------------------------------------------------------------
; Unix-mode
;------------------------------------------------------------------------------
(prefer-coding-system 'utf-8-unix)
;(setq coding-system-for-read 'utf-8-unix)
(setq coding-system-for-write 'utf-8-unix)
(defalias 'dos2unix 'delete-trailing-whitespace)



;------------------------------------------------------------------------------
; Personnal shortcuts
;------------------------------------------------------------------------------
;Ctrl X Ctrl l: goto line
(global-set-key [(ctrl x)(ctrl l)] 'goto-line)



;------------------------------------------------------------------------------
; font/color
;------------------------------------------------------------------------------
;(set-default-font "7*14")
(set-foreground-color "gray")
(set-background-color "black")
(set-cursor-color "darkslateblue")
;(set-face-background 'modeline "darkslateblue")
;(set-face-foreground 'modeline "lemonchiffon")


;------------------------------------------------------------------------------
; Mouse managment
;------------------------------------------------------------------------------
; Wheel : 5 lignes
(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly) 
;Shift-Whell : 1 ligne
(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [S-mouse-4] 'down-one)
(global-set-key [S-mouse-5] 'up-one) 
;Ctrl-Whell : page
(defun up-a-lot() (interactive)(scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [C-mouse-4] 'down-a-lot)
(global-set-key [C-mouse-5] 'up-a-lot)

; Copy/paste
(setq mouse-drag-copy-region t)
(setq mouse-yank-at-point t)


;------------------------------------------------------------------------------
; Developement configuration
;------------------------------------------------------------------------------
; Colors...
(global-font-lock-mode 'on)
(custom-set-variables
 '(font-lock-maximum-size 1256000))
(custom-set-faces)

; Display parenthesis
(show-paren-mode t)

;Ctrl Shift + direction : moving by block
(global-set-key [(ctrl shift right)] 'forward-sexp)
(global-set-key [(ctrl shift left)] 'backward-sexp)

; Never use tab but spaces
(setq-default indent-tabs-mode nil) 
(setq-default tab-width 4)

; Special cases for C source
(c-set-offset 'substatement-open '0)
(c-set-offset 'brace-list-open '0)
(c-set-offset 'statement-case-open '0)


;------------------------------------------------------------------------------
; Invalid char lookup
;------------------------------------------------------------------------------
(defun find-next-unsafe-char (&optional coding-system)
  "Find the next character in the buffer that cannot be encoded by
coding-system. If coding-system is unspecified, default to the coding
system that would be used to save this buffer. With prefix argument,
prompt the user for a coding system."
  (interactive "Zcoding-system: ")
  (if (stringp coding-system) (setq coding-system (intern coding-system)))
  (if coding-system nil
    (setq coding-system
          (or save-buffer-coding-system buffer-file-coding-system)))
  (let ((found nil) (char nil) (csets nil) (safe nil))
    (setq safe (coding-system-get coding-system 'safe-chars))
    ;; some systems merely specify the charsets as ones they can encode:
    (setq csets (coding-system-get coding-system 'safe-charsets))
    (save-excursion
      ;;(message "zoom to <")
      (let ((end  (point-max))
            (here (point    ))
            (char  nil))
        (while (and (< here end) (not found))
          (setq char (char-after here))
          (if (or (eq safe t)
                  (< char ?\177)
                  (and safe  (aref safe char))
                  (and csets (memq (char-charset char) csets)))
              nil ;; safe char, noop
            (setq found (cons here char)))
          (setq here (1+ here))) ))
    (and found (goto-char (1+ (car found))))
    found))


;------------------------------------------------------------------------------
; plugins
;------------------------------------------------------------------------------
(setq load-path (nconc '("~/.config/emacs/lisp") load-path))

;ido mode (folder browsing)
(require 'ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode t)

; Better buffer names
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

; CSV using ORG mode
(defun csv-region ()
  (interactive)
  (load-library "org-table")
  (org-table-convert-region (region-beginning) (region-end) )
)

;XML mode
(setq load-path (nconc '("~/.config/emacs/lisp/nxml") load-path))
(autoload 'nxml-mode "rng-auto" "" t)
(add-hook 'xml-mode-hook 'turn-on-font-lock)
(setq auto-mode-alist
      (append
       (list
	'("\\.xml" . nxml-mode)
	'("\\.xsd" . nxml-mode)
	'("\\.html" . nxml-mode)
	'("\\.htm" . nxml-mode)
	'("\\.xhtml" . nxml-mode)
	)
       auto-mode-alist))

;XSL mode
(autoload 'xsl-mode "xslide" "Major mode for XSL stylesheets." t)
(add-hook 'xsl-mode-hook 'turn-on-font-lock)
(setq auto-mode-alist
      (append
       (list
	'("\\.fo" . xsl-mode)
	'("\\.xsl" . xsl-mode)
	)
       auto-mode-alist))

;bat-mode
(autoload 'bat-mode "bat-mode" "DOS and WIndows BAT files" t)
(setq auto-mode-alist 
      (append 
       (list (cons "\\.[bB][aA][tT]$" 'bat-mode))
       ;; For DOS init files
       (list (cons "CONFIG\\."   'bat-mode))
       (list (cons "AUTOEXEC\\." 'bat-mode))
       auto-mode-alist))


;javascript-mode
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))


;sh-mode
(setq auto-mode-alist
      (append
       (list
	'("kshrc" . sh-mode)
	'("profile" . sh-mode)
	)
       auto-mode-alist))

;yaml-mode
(autoload 'yaml-mode "yaml-mode" "yaml-mode" t)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

; colored diff
(require 'diff-mode-)

; Markers
(require 'marker-visit)
(global-set-key [M-right] 'marker-visit-next)
(global-set-key [M-left] 'marker-visit-prev)
(global-set-key [M-down] 'marker-visit-truncate-mark-ring)

; clearcase
(load-library "clearcase")

; groovy mode
(autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
(add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
(add-to-list 'auto-mode-alist '("Jenkinsfile" . groovy-mode))

; acsii-doc mode
(load-library "snp-adoc")

; markdown
(autoload 'markdown-mode "markdown-mode" "markdown-mode" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

; powershell
(autoload 'powershell-mode "powershell-mode" "powershell-mode" t)
(add-to-list 'auto-mode-alist '("\\.ps1\\'" . powershell-mode))

; css mode
(autoload 'css-mode "css-mode")
(setq auto-mode-alist
      (cons '("\\.css\\'" . css-mode) auto-mode-alist))

; Python
(setq python-mode-hook
      '(lambda () (progn
                    (set-variable 'py-indent-offset 4)
                    (set-variable 'py-smart-indentation nil)
                    (set-variable 'indent-tabs-mode nil) )))


; cmake
(autoload 'cmake-mode "cmake-mode" "Major mode for CMake" t)
(setq auto-mode-alist
      (append
       (list
	'("CMakeLists.txt" . cmake-mode)
	'("\\.cmake" . cmake-mode)
	)
       auto-mode-alist))


; ninja
(autoload 'ninja-mode "ninja-mode" "Major mode for Ninja" t)
(setq auto-mode-alist
      (append
       (list
	'("\\.ninja" . ninja-mode)
	)
       auto-mode-alist))
